
% HologramHelperClass.supperposition(conj(E_sample))

%% Input image (virtual plane)
N = 15;
A_virtual = zeros(N, N); % initial an array to store sample image for calculation
A_virtual(8, 6:10) = 1;
[M, N] = size(A_virtual);

figure;
imagesc(abs(A_virtual));
colormap gray
colorbar
title('Image Plane(desired pattern)')
set(gcf, 'Position', [00, 00, 350, 300])
set(gca,'FontSize', 12) % Font Size

%% Sample image initial state (sample plane)
E_sample = zeros(N, N); % initial an array to store sample image for calculation
E_sample(1, :) = 1;
E_sample(N, :) = 1;
E_sample(:, 1) = 1;
E_sample(:, N) = 1;

figure;
imagesc(abs(E_sample));
colormap gray
colorbar
title('Image Plane(desired pattern)')
set(gcf, 'Position', [00, 00, 350, 300])
set(gca,'FontSize', 12) % Font Size

%% Gerchberg-Saxton iteration

iter = 1000;

while iter > 0
    
    E_holo = HologramHelperClass.supperposition(conj(E_sample));
    
    E_holo
   iter = iter - 1; 
end


